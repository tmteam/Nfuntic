 [Test]
        public void EmptyArrayInit()
        {
            //1    0
            //y = []
            solver.SetArrayInit(0).AssertSuccesfully();
            solver.SetDefenition("y", 1, 0);
            
            var res = solver.Solve();
            Assert.AreEqual(1,res.GenericsCount);
            Assert.AreEqual(TiType.ArrayOf(TiType.Generic(0)), res.GetVarType("y"));
        }
        [Test]
        public void ArrayOfVariables_Solved()
        {
            //       3   20 1
            //a:int; y = [a,b]
            solver.SetVarType("a", TiType.Int32);
            solver.SetVar(0,"a");
            solver.SetVar(1,"b");
            solver.SetArrayInit(2,0,1).AssertSuccesfully();
            solver.SetDefenition("y", 3, 2);
            
            var res = solver.Solve();
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.Int32, res.GetVarType("a"));
            Assert.AreEqual(TiType.Int32, res.GetVarType("b"));
            Assert.AreEqual(TiType.ArrayOf(TiType.Int32), res.GetVarType("y"));
        }
        
      
        
        [Test]
        public void ProcArrayOfVariables_Solved()
        {
            //3   20  1
            //y = [a..b]
            solver.SetVar(0,"a");
            solver.SetVar(1,"b");
            Assert.IsTrue(solver.SetProcArrayInit(2,0,1));
            solver.SetDefenition("y", 3, 2);
            
            var res = solver.Solve();
            Assert.IsTrue(res.IsSolved);
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.Int32, res.GetVarType("a"));
            Assert.AreEqual(TiType.Int32, res.GetVarType("b"));
            Assert.AreEqual(TiType.ArrayOf(TiType.Int32), res.GetVarType("y"));
        }
        [Test]
        public void ProcArrayOfVariablesWithStep_SolvedAsReal()
        {
            //4   30  1  2
            //y = [a..b..c]
            solver.SetVar(0,"a");
            solver.SetVar(1,"b");
            solver.SetVar(2,"c");

            Assert.IsTrue(solver.SetProcArrayInit(3,0,1,2));
            solver.SetDefenition("y", 4, 3);
            
            var res = solver.Solve();
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.Real, res.GetVarType("a"));
            Assert.AreEqual(TiType.Real, res.GetVarType("b"));
            Assert.AreEqual(TiType.ArrayOf(TiType.Real), res.GetVarType("y"));
        }
        [Test]
        public void ProcArrayOfConstantsWithStep_SolvedAsInt()
        {
            //4   30  1  2
            //y = [1..5..2]
            solver.SetConst(0,TiType.Int32);
            solver.SetConst(1,TiType.Int32);
            solver.SetConst(2,TiType.Int32);

            Assert.IsTrue(solver.SetProcArrayInit(3,0,1,2));
            solver.SetDefenition("y", 4, 3);
            
            var res = solver.Solve();
            Assert.IsTrue(res.IsSolved);
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.ArrayOf(TiType.Int32), res.GetVarType("y"));
        }
       
        [Test]
        public void ProcArrayOfConstantsWithStep_SolvedAsReal()
        {
            //4   30  1    2
            //y = [1..5.0..2]
            solver.SetConst(0,TiType.Int32);
            solver.SetConst(1,TiType.Real);
            solver.SetConst(2,TiType.Int32);

            solver.SetProcArrayInit(3,0,1,2);
            solver.SetDefenition("y", 4, 3);
            
            var res = solver.Solve();
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.ArrayOf(TiType.Real), res.GetVarType("y"));
        }
        
        [Test]
        public void EqualsAsGeneric_TwoConstantsArray_ReturnsTrue()
        {
            //5    1 0  4  3 2
            //y = [ 1 ] == [ 1 ]
            solver.SetConst(0,TiType.Int32);
            solver.SetArrayInit(1, 0);
            solver.SetConst(2,TiType.Int32);
            solver.SetArrayInit(3, 2);

            Assert.IsTrue(solver.SetCall(new CallDefinition(new[] {TiType.Bool, TiType.Generic(0), TiType.Generic(0)}, new[] {4, 1, 3})));
            solver.SetDefenition("y", 5, 4).AssertSuccesfully();
            
            var res = solver.Solve();
            
            Assert.IsTrue(res.IsSolved);
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.Bool, res.GetVarType("y"));
        }
        
        
        [Test]
        public void EqualsAsObjects_TwoConstantsArray_ReturnsTrue()
        {
            //5    1 0  4  3 2
            //y = [ 1 ] == [ 1 ]
            solver.SetConst(0,TiType.Int32);
            solver.SetArrayInit(1, 0);
            solver.SetConst(2,TiType.Int32);
            solver.SetArrayInit(3, 2);

            Assert.IsTrue(solver.SetCall(new CallDefinition(new[] {TiType.Bool, TiType.Any, TiType.Any}, new[] {4, 1, 3})));
            solver.SetDefenition("y", 5, 4).AssertSuccesfully();
            
            var res = solver.Solve();
            Assert.IsTrue(res.IsSolved);
            Assert.AreEqual(0,res.GenericsCount);
            Assert.AreEqual(TiType.Bool, res.GetVarType("y"));
        }
